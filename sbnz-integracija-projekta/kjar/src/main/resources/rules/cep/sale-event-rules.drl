package cep;
dialect  "java"

import com.ftn.sbnz.model.events.SaleEvent;
import com.ftn.sbnz.model.events.PurchaseEvent;
import com.ftn.sbnz.model.events.StockAlert;
import com.ftn.sbnz.model.models.Fabric;
import com.ftn.sbnz.model.models.enums.Season;
import com.ftn.sbnz.model.util.SeasonUtils;

declare SaleEvent
    @role( event )
    @timestamp( timestamp )
end

declare PurchaseEvent
    @role( event )
    @timestamp( timestamp )
end


rule "Rast prodaje (7d > 2x prethodnih 7d)"
//    no-loop true
when
    $s : SaleEvent( $fabric : fabricName )
    not StockAlert(fabric == $fabric, type == "DEMAND_SPIKE_7D")
    $sum14 : Number() from accumulate(
        SaleEvent( fabricName == $fabric, $q : quantity ) over window:time(14d),
        sum($q)
    )
    $sum7 : Number() from accumulate(
        SaleEvent( fabricName == $fabric, $q : quantity ) over window:time(7d),
        sum($q)
    )
    eval(
        (
            ($sum14.doubleValue() - $sum7.doubleValue()) > 0.0 &&
            $sum7.doubleValue() > 2 * ($sum14.doubleValue() - $sum7.doubleValue())
        )
        ||
        (
            ($sum14.doubleValue() - $sum7.doubleValue()) == 0.0 &&
            $sum7.doubleValue() >= 3.0
        )
    )
then
    System.out.println("Nagli rast prodaje za: " + $fabric +
                                    " | poslednjih 7 dana=" + $sum7 +
                                    " | prethodnih 7 dana=" + ($sum14.doubleValue() - $sum7.doubleValue()));
    insert(new StockAlert($fabric, "DEMAND_SPIKE_7D",
            "Nagli rast prodaje za: " + $fabric +
            " | poslednjih 7 dana=" + $sum7 +
            " | prethodnih 7 dana=" + ($sum14.doubleValue() - $sum7.doubleValue())));
end


rule "Prodaja veća od nabavke (30 dana)"
when
    $s : SaleEvent( $fabric : fabricName )
    not StockAlert(fabric == $fabric, type == "SALES_OVER_PURCHASES")
    $sumSales : Number() from accumulate(
        SaleEvent( fabricName == $fabric, $q : quantity ) over window:time(30d),
        sum($q)
    )
    $sumPurchases : Number() from accumulate(
        PurchaseEvent( fabricName == $fabric, $n : quantity ) over window:time(30d),
        sum($n)
    )
    eval( $sumSales.doubleValue() > $sumPurchases.doubleValue() )
then
    System.out.println("Prodaja > nabavke za: " + $fabric + " (30 dana)");
    insert(new StockAlert($fabric, "SALES_OVER_PURCHASES",
            "Prodaja > nabavke za: " + $fabric + " (30 dana). prodaja=" +$sumSales +", nabavka=" + $sumPurchases));
end


rule "Dugotrajna stagnacija materijala (60d bez prodaje)"
when
    // 1) Uzmemo materijal iz baze znanja
    $fabric : Fabric( $fname : name, $season : season )
    not StockAlert(fabric == $fname, type == "STAGNATION")
    // 2) Za njega nije bilo prodaje u poslednjih 60 dana
    not SaleEvent( fabricName == $fname) over window:time(60d)
    eval( $season == Season.UNIVERSAL || SeasonUtils.isInSeason($season) )
then
    System.out.println("Stagnacija 60 dana → predlog rasprodaje/izbacivanja: " + $fname);
    insert(new StockAlert($fname, "STAGNATION",
            "Stagnacija 60 dana → predlog rasprodaje/izbacivanja: " + $fname));
end


rule "Nagla potražnja"
when
    $s : SaleEvent( $fabric : fabricName )
    not StockAlert(fabric == $fabric, type == "DEMAND_SPIKE")
    $salesCount : Number() from accumulate(
        SaleEvent( fabricName == $fabric, $q : quantity ) over window:time(10m),
        count($q)
    )
    eval(
        $salesCount.intValue() >= 3
    )
then
    System.out.println("Nagla potražnja za materijal: " + $fabric +
                              " | broj prodaja=" + $salesCount);
    insert(new StockAlert($fabric, "DEMAND_SPIKE",
           "Nagla potražnja za materijal: " + $fabric +
           " | broj prodaja=" + $salesCount));
end
